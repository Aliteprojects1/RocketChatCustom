Template.adminRooms.helpers({
	isReady: function() {
		var ref;
		return (ref = Template.instance().ready) != null ? ref.get() : void 0;
	},
	rooms: function() {
		return Template.instance().rooms();
	},
	flexOpened: function() {
		if (RocketChat.TabBar.isFlexOpen()) {
			return 'opened';
		}
	},
	arrowPosition: function() {
		if (!RocketChat.TabBar.isFlexOpen()) {
			return 'left';
		}
	},
	isLoading: function() {
		var ref;
		if (!((ref = Template.instance().ready) != null ? ref.get() : void 0)) {
			return 'btn-loading';
		}
	},
	hasMore: function() {
		var base, ref;
		return ((ref = Template.instance().limit) != null ? ref.get() : void 0) === (typeof (base = Template.instance()).rooms === "function" ? base.rooms().count() : void 0);
	},
	roomCount: function() {
		var base;
		return typeof (base = Template.instance()).rooms === "function" ? base.rooms().count() : void 0;
	},
	name: function() {
		if (this.t === 'c' || this.t === 'p') {
			return this.name;
		} else if (this.t === 'd') {
			return this.usernames.join(' x ');
		}
	},
	type: function() {
		if (this.t === 'c') {
			return TAPi18n.__('Channel');
		} else if (this.t === 'd') {
			return TAPi18n.__('Direct Message');
		}
		if (this.t === 'p') {
			return TAPi18n.__('Private Group');
		}
	},
	flexTemplate: function() {
		return RocketChat.TabBar.getTemplate();
	},
	flexData: function() {
		return RocketChat.TabBar.getData();
	},
	"default": function() {
		if (this["default"]) {
			return t('True');
		} else {
			return t('False');
		}
	}
});

Template.adminRooms.onCreated(function() {
	var instance;
	instance = this;
	this.limit = new ReactiveVar(50);
	this.filter = new ReactiveVar('');
	this.types = new ReactiveVar([]);
	this.ready = new ReactiveVar(true);
	RocketChat.TabBar.addButton({
		groups: ['adminrooms'],
		id: 'admin-room',
		i18nTitle: 'Room_Info',
		icon: 'icon-info-circled',
		template: 'adminRoomInfo',
		order: 1
	});
	RocketChat.ChannelSettings.addOption({
		id: 'make-default',
		template: 'channelSettingsDefault',
		data: function() {
			return Session.get('adminRoomsSelected');
		},
		validation: function() {
			return RocketChat.authz.hasAllPermission('view-room-administration');
		}
	});
	this.autorun(function() {
		var filter, limit, subscription, types;
		filter = instance.filter.get();
		types = instance.types.get();
		if (types.length === 0) {
			types = ['c', 'd', 'p'];
		}
		limit = instance.limit.get();
		subscription = instance.subscribe('adminRooms', filter, types, limit);
		return instance.ready.set(subscription.ready());
	});
	this.rooms = function() {
		var filter, filterReg, query, ref, ref1, ref2, types;
		filter = _.trim((ref = instance.filter) != null ? ref.get() : void 0);
		types = (ref1 = instance.types) != null ? ref1.get() : void 0;
		if (!_.isArray(types)) {
			types = [];
		}
		query = {};
		filter = _.trim(filter);
		if (filter) {
			filterReg = new RegExp(s.escapeRegExp(filter), "i");
			query = {
				$or: [
					{
						name: filterReg
					}, {
						t: 'd',
						usernames: filterReg
					}
				]
			};
		}
		if (types.length) {
			query['t'] = {
				$in: types
			};
		}
		return ChatRoom.find(query, {
			limit: (ref2 = instance.limit) != null ? ref2.get() : void 0,
			sort: {
				"default": -1,
				name: 1
			}
		});
	};
	return this.getSearchTypes = function() {
		return _.map($('[name=room-type]:checked'), function(input) {
			return $(input).val();
		});
	};
});

Template.adminRooms.onRendered(function() {
	return Tracker.afterFlush(function() {
		SideNav.setFlex("adminFlex");
		return SideNav.openFlex();
	});
});

Template.adminRooms.events({
	'keydown #rooms-filter': function(e) {
		if (e.which === 13) {
			e.stopPropagation();
			return e.preventDefault();
		}
	},
	'keyup #rooms-filter': function(e, t) {
		e.stopPropagation();
		e.preventDefault();
		return t.filter.set(e.currentTarget.value);
	},
	'click .room-info': function(e) {
		e.preventDefault();
		Session.set('adminRoomsSelected', {
			rid: this._id
		});
		return RocketChat.TabBar.setTemplate('adminRoomInfo');
	},
	'click .load-more': function(e, t) {
		e.preventDefault();
		e.stopPropagation();
		return t.limit.set(t.limit.get() + 50);
	},
	'change [name=room-type]': function(e, t) {
		return t.types.set(t.getSearchTypes());
	}
});

// ---
// generated by coffee-script 1.9.2
